name: AWS cloudfront controller
version: 0.0.1
services:
  NodeGroupInventoryWallet:
    annotations: {}
    apiVersion: core.meshery.io/v1alpha1
    dependsOn:
    - ack-cloudfront-controller
    id: null
    isAnnotation: null
    labels: {}
    model: meshery-core
    name: NodeGroupInventoryWallet
    namespace: ""
    settings: {}
    traits:
      meshmap:
        edges: []
        id: b03674ca-45e1-406e-b00c-14aec67307e6
        label: NodeGroupInventoryWallet
        meshmodel-data:
          category:
            metadata: null
            name: Orchestration & Management
          components: null
          description: ""
          displayName: Meshery Core
          hostID: 26e64aa8-2d86-57bd-92b3-2a73160d27b4
          id: 3e2db384-d3af-5fac-8af2-684fc3c29446
          metadata:
            isAnnotation: false
            subCategory: App Definition and Development
            svgColor: ui/public/static/img/meshmodels/meshery-core/color/meshery-core-color.svg
            svgComplete: ""
            svgWhite: ui/public/static/img/meshmodels/meshery-core/color/meshery-core-color.svg
          model:
            version: 0.7.1
          name: meshery-core
          registrant:
            hostname: artifacthub
          relationships: null
          schemaVersion: core.meshery.io/v1beta1
          status: enabled
          subCategory: App Definition and Development
          version: v1.0.0
        meshmodel-metadata:
          capabilities: |-
            {
              "designer": {
                "pass-events-to": "parent", "supportsCompoundDragAndDrop":false,
                "edit": {
                  "config": false,
                  "copy": false,
                  "delete": false,
                  "duplicate": false,
                  "reset-styles": false,
                  "resolve": false,
                  "lock": false,
                  "shape": {
                    "convert-shape": false
                  },
                  "style": false
                },
                "label": {
                  "edit": false,
                  "show": false,
                  "sync-with-config-property": "none"
                }
              }
            }
          defaultData: '{"label":""}'
          genealogy: parent
          hasInvalidSchema: true
          isAnnotation: true
          primaryColor: '#00B39F'
          secondaryColor: '#00D3A9'
          shape: round-rectangle
          shapePolygonPoints: ""
          status: enabled
          styleOverrides:
            background-image: none
            background-opacity: 0
            border-style: dashed
            border-width: 0
            data:
              label: ""
            height: 30px
            width: 30px
            z-index: 3
          styles: '{"height":"30px","width":"30px", "background-image":"none","border-width":0,"border-style":"dashed","background-opacity":0}'
          subCategory: ""
          svgColor: ui/public/static/img/meshmodels/meshery-core/color/anchornode-color.svg
          svgComplete: ""
          svgWhite: ui/public/static/img/meshmodels/meshery-core/white/anchornode-white.svg
        parent: 9938e14e-c285-446a-a306-94572dcc0d19
        position:
          posX: 90
          posY: 90
        whiteboardData: {}
    type: NodeGroupInventoryWallet
    version: 0.7.1
  ack-cloudfront-controller:
    annotations: {}
    apiVersion: apps/v1
    dependsOn: []
    id: null
    isAnnotation: null
    labels:
      app.kubernetes.io/instance: ack-cloudfront-controller
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ack-cloudfront-controller
      app.kubernetes.io/version: 1.0.0
      helm.sh/chart: ack-cloudfront-controller-1.0.0
      k8s-app: ack-cloudfront-controller
    model: kubernetes
    name: ack-cloudfront-controller
    namespace: ack-system
    settings:
      spec:
        replicas: 1
        selector:
          match Labels:
            app.kubernetes.io/instance: ack-cloudfront-controller
            app.kubernetes.io/name: ack-cloudfront-controller
        template:
          metadata:
            labels:
              app.kubernetes.io/instance: ack-cloudfront-controller
              app.kubernetes.io/managed-by: Helm
              app.kubernetes.io/name: ack-cloudfront-controller
              k8s-app: ack-cloudfront-controller
          spec:
            affinity:
              node Affinity:
                required During Scheduling Ignored During Execution:
                  node Selector Terms:
                  - match Expressions:
                    - key: kubernetes.io/e2e-az-name
                      operator: In
                      values:
                      - e2e-az1
                      - e2e-az2
            containers:
            - args:
              - --aws-region
              - us-west-2
              - --aws-endpoint-url
              - https://cloudfront.amazonaws.com
              - --log-level
              - info
              - --resource-tags
              - env=prod
              - --watch-namespace
              - ""
              - --deletion-policy
              - Retain
              command:
              - ./bin/controller
              env:
              - name: AWS_REGION
                value: us-west-2
              - name: AWS_ENDPOINT_URL
                value: https://cloudfront.amazonaws.com
              - name: ACK_LOG_LEVEL
                value: info
              - name: ACK_RESOURCE_TAGS
                value: env=prod
              - name: ACK_WATCH_NAMESPACE
                value: ""
              image: ack-cloudfront-controller:latest
              image Pull Policy: IfNotPresent
              liveness Probe:
                http Get:
                  path: /healthz
                  port: 8081
                initial Delay Seconds: 15
                period Seconds: 20
              name: controller
              ports:
              - container Port: 8080
                name: http
                protocol: TCP
              readiness Probe:
                http Get:
                  path: /readyz
                  port: 8081
                initial Delay Seconds: 5
                period Seconds: 10
              resources:
                limits:
                  cpu: 500m
                  memory: 128Mi
                requests:
                  cpu: 250m
                  memory: 64Mi
              security Context:
                allow Privilege Escalation: false
                capabilities:
                  drop:
                  - ALL
                run As Non Root: true
            dns Policy: ClusterFirst
            node Selector:
              kubernetes.io/os: linux
            security Context:
              fs Group: 2000
              run As User: 1000
            service Account Name: ack-cloudfront-controller
            termination Grace Period Seconds: 10
            tolerations:
            - effect: NoSchedule
              key: key1
              operator: Equal
              value: value1
    traits:
      meshmap:
        edges: []
        id: 9938e14e-c285-446a-a306-94572dcc0d19
        meshmodel-metadata:
          capabilities: |2-
             {
              "designer": {
                "edit": {
                  "shape": {
                    "convert-shape": false
                  }
                }
              }
            }
          defaultData: ""
          genealogy: parent
          isAnnotation: false
          isCustomResource: false
          isModelAnnotation: "FALSE"
          isNamespaced: true
          logoURL: Created by Meshery Authors
          model: kubernetes
          modelDisplayName: Kubernetes
          primaryColor: '#326CE5'
          secondaryColor: '#7aa1f0'
          shape: round-pentagon
          shapePolygonPoints: ""
          status: enabled
          styleOverrides: '{"border-width":2,"background-opacity":0.5}'
          styles: '{"border-width":2,"background-opacity":0.5}'
          subCategory: ""
          svgColor: ui/public/static/img/meshmodels/kubernetes/color/deployment-color.svg
          svgComplete: ui/public/static/img/meshmodels/kubernetes/complete/deployment-complete.svg
          svgWhite: ui/public/static/img/meshmodels/kubernetes/white/deployment-white.svg
        position:
          posX: 90
          posY: 90
        whiteboardData:
          style: {}
    type: Deployment
    version: ""
